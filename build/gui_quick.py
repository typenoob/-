import a_init
import time
import os
import sys
from src import predict
from src import pen
from src import file
from src import eraser
from tkinter.constants import CENTER, TOP
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, font
from PIL import Image, ImageTk
from tkinter.colorchooser import *
from pathlib import Path
from src import translate
import gui_main

# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


# from tkinter import *
# Explicit imports to satisfy Flake8

OUTPUT_PATH = Path(__file__).parent
# OUTPUT_PATH = Path(os.path.dirname(os.path.realpath(sys.executable)))
ASSETS_PATH = OUTPUT_PATH / Path("./assets")
TMP_PATH = OUTPUT_PATH / Path("./tmp")
thick = 3
fgcolor = "black"  # 全局变量画笔颜色 默认为黑色
fillf = ''  # 全局变量填充颜色，默认为透明


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def relative_to_tmp(path: str) -> Path:
    return TMP_PATH / Path(path)


def trans(window, draw, text, text1):
    result = text.get('1.0', 'end').split('\n')
    str = ''
    for i in result:
        tran = translate.translate(i)
        if tran:
            str += tran+'\n'
            time.sleep(1)
    text1.delete('1.0', 'end')
    text1.insert('insert', str)


def _async(window, draw, text):
    global result
    try:
        file.save(window, draw, relative_to_tmp("tmp.png"))
        result = eval(predict.predict(predict.encode(
            relative_to_tmp("tmp.png"))))['prediction']['names']
        str = ''
        for i in result:
            str += i+'\n'
        text.delete('1.0', 'end')
        text.insert('insert', str)
    except:
        pass


def jump_main(canvas, root):
    canvas.destroy()
    canvas = Canvas(
        root,
        bg="#FFFFFF",
        height=1024,
        width=1440,
        bd=0,
        highlightthickness=0,
        relief="ridge"
    )
    gui_main.entry(canvas, root)


def entry(canvas, root):
    window = root
    global image_image_2, image_image_8, button_image_6
    canvas.place(x=0, y=0)
    image_image_2 = PhotoImage(
        file=relative_to_assets("image_2.png"))
    image_2 = canvas.create_image(
        459.0,
        350.0,
        image=image_image_2
    )
    image = Image.open(relative_to_assets("image_8.jpeg"))
    image_image_8 = ImageTk.PhotoImage(image)
    image_8 = canvas.create_image(
        1180.0,
        250.0,
        image=image_image_8
    )
    draw = Canvas(
        window,
        bg="#FFFFFF",
        height=635,
        width=900,
        bd=0,
        highlightthickness=0,
        relief="ridge"
    )
    draw.place(
        x=9.0,
        y=30.0
    )
    pen.Pen(thick=10).bind(draw)
    eraser.Eraser(1)._bind(draw)
    canvas.create_text(
        220.0,
        800.0,
        anchor="nw",
        text="我猜你画的是",
        fill="#000000",
        font=("Roboto", 32 * -1)
    )
    canvas.create_text(
        820.0,
        800.0,
        anchor="nw",
        text="翻译结果",
        fill="#000000",
        font=("Roboto", 32 * -1)
    )

    text = Text(canvas, font=("方正舒体", 30*-1), bg="#E0E0E0", border=0)
    text.place(x=520, y=800, width=200, height=160)
    text1 = Text(canvas, font=("方正舒体", 30*-1), bg="#E0E0E0", border=0)
    text1.place(x=1020, y=800, width=200, height=160)
    Button(
        text="清\n屏",
        bg="#FDF419",
        font=("YeonSung Regular", 26 * -1),
        borderwidth=0,
        highlightthickness=0,
        command=lambda: draw.delete("all"),
        relief="flat"
    ).place(x=1300.0, y=480.0, width=60.0, height=200.0)
    Button(
        text="翻\n译",
        bg="#FDF419",
        font=("YeonSung Regular", 26 * -1),
        borderwidth=0,
        highlightthickness=0,
        command=lambda: trans(window, draw, text, text1),
        relief="flat"
    ).place(x=1050.0, y=480.0, width=60.0, height=200.0)
    button_image_6 = PhotoImage(
        file=relative_to_assets("image_6.png"))
    button_11 = Button(
        image=button_image_6,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: jump_main(canvas, root),
        relief="flat"
    )
    button_11.place(x=1150, y=780)

    for i in range(1, 10000):
        window.after(1000*i, lambda: _async(window, draw, text))
